=========================================================================== 
 render函数在渲染的时候，如果type是：
    + 字符串：创建一个标签
    + 普通函数：把函数执行，并且把props传递给函数
    + 构造函数：把构造函数基于new执行「也就是创建类的一个实例」，也会把解析出来的props传递过去
      + 每调用一次类组件都会创建一个单独的实例
      + 把在类组件中编写的render函数执行，把返回的jsx「virtualDOM」当做组件视图进行渲染！！
      例如：
      new Vote({
        title:'React其实还是很好学的!'
      })
 ===========================================================================
=========================================================================== 
 函数组件是“静态组件”
   第一次渲染组件，把函数执行
     + 产生一个私有的上下文：EC(V)
     + 把解析出来的props「含children」传递进来「但是被冻结了」
     + 对函数返回的JSX元素「virtualDOM」进行渲染
   当我们点击按钮的时候，会把绑定的小函数执行：
     + 修改上级上下文EC(V)中的变量
     + 私有变量值发生了改变
     + 但是“视图不会更新”
   =>也就是，函数组件第一次渲染完毕后，组件中的内容，不会根据组件内的某些操作，再进行更新，所以称它为静态组件
   =>除非在父组件中，重新调用这个函数组件「可以传递不同的属性信息」

 真实项目中，有这样的需求：第一次渲染就不会再变化的，可以使用函数组件！！
 但是大部分需求，都需要在第一次渲染完毕后，基于组件内部的某些操作，让组件可以更新，以此呈现出不同的效果！！==> 动态组件「方法：类组件、Hooks组件(在函数组件中，使用Hooks函数)」
 ===========================================================================
=========================================================================== 
 PureComponent和Component的区别：
   PureComponent会给类组件默认加一个shouldComponentUpdate周期函数
     + 在此周期函数中，它对新老的属性/状态 会做一个钱浅比较
     + 如果经过浅比较，发现属性和状态并没有改变，则返回false「也就是不继续更新组建」；有变化才会去更新！！
===========================================================================
===========================================================================
  受控组件：基于修改数据/状态，让视图更新，达到需要的效果 「推荐」
  非受控组件：基于ref获取DOM元素，我们操作DOM元素，来实现需求和效果「偶尔」
    基于ref获取DOM元素的语法
    1. 给需要获取的元素设置ref='xxx'，后期基于this.refs.xxx去获取相应的DOM元素「不推荐使用：在React.StrictMode模式下会报错」
       <h2 ref="titleBox">...</h2>
       获取：this.refs.titleBox

    2. 把ref属性值设置为一个函数
       ref={x=>this.xxx=x}
         + x是函数的形参：存储的就是当前DOM元素
         + 然后我们获取的DOM元素“x”直接挂在到实例的某个属性上(例如：box2)
       获取：this.xxx

    3. 基于React.createRef()方法创建一个REF对象
       this.xxx=React.createRef();  //=> this.xxx={current:null}
       ref={REF对象(this.xxx)}
       获取：this.xxx.current

    原理：在render渲染的时候，会获取virtualDOM的ref属性
      + 如果属性值是一个字符串，则会给this.refs增加这样的一个成员，成员值就是当前的DOM元素
      + 如果属性值是一个函数，则会把函数执行，把当前DOM元素传递给这个函数「x->DOM元素」,而在函数执行的内部，我们一般都会把DOM元素直接挂在到实例的某个属性上
      + 如果属性值是一个REF对象，则会把DOM元素赋值给对象的current属性
 ===========================================================================
===========================================================================
 给元素标签设置ref，目的：获取对应的DOM元素 
 给类组件设置ref，目的：获取当前调用组件创建的实例「后续可以根据实例获取子组件中的相关信息」
 给函数组件设置ref，直接报错：Function components cannot be given refs. Attempts to access this ref will fail.
   + 但是我们让其配合 React.forwardRef 实现ref的转发
   + 目的：获取函数子组件内部的某个元素
 ===========================================================================
=========================================================================== 
 this.setState([partialState],[callback])
    [partialState]:支持部分状态更改
        this.setState({
            x:100 //不论总共有多少状态，我们只修改了x，其余的状态不动
        });
    [callback]:在状态更改/视图更新完毕后触发执行「也可以说只要执行了setState，callback一定会执行」
        + 发生在componentDidUpdate周期函数之后「DidUpdate会在任何状态更改后都触发执行；而回调函数方式，可以在指定状态更新后处理一些事情；」
        + 特殊：即便我们基于shouldComponentUpdate阻止了状态/视图的更新，DidUpdate周期函数肯定不会执行了，但是我们设置的这个callback回调函数依然会被触发执行！！
        + 类似于Vue框架中的$nextTick！！

 在React18中，setState操作都是异步的「不论是在哪执行，例如：合成事件、周期函数、定时器...」
   目的：实现状态的批处理「统一处理」
     + 有效减少更新次数，降低性能消耗
     + 有效管理代码执行的逻辑顺序
     + ...
   原理：利用了更新队列「updater」机制来处理的
     + 在当前相同的时间段内「浏览器此时可以处理的事情中」，遇到setState会立即放入到更新队列中！
     + 此时状态/视图还未更新
     + 当所有的代码操作结束，会“刷新队列”「通知更新队列中的任务执行」：把所有放入的setState合并在一起执行，只触发一次视图更新「批处理操作」
===========================================================================
=========================================================================== 
创建类组件
  创建一个构造函数(类)
    + 要求必须继承React.Component/PureComponent这个类
    + 我们习惯于使用ES6中的class创建类「因为方便」
    + 必须给当前类设置一个render的方法「放在其原型上」：在render方法中，返回需要渲染的视图

  从调用类组件「new Vote({...})」开始，类组件内部发生的事情：
    1. 初始化属性 && 规则校验
      先规则校验，校验完毕后，再处理属性的其他操作！！
      方案一： 
      constructor(props) {
        super(props); //会把传递进来的属性挂载到this实例上
        console.log(this.props); //获取到传递的属性
      }
      方案二：即便我们自己不再constructor中处理「或者constructor都没写」，在constructor处理完毕后，React内部也会把传递的props挂载到实例上；所以在其他的函数中，只要保证this是实例，就可以基于this.props获取传递的属性！
        + 同样this.props获取的属性对象也是被冻结的{只读的}  Object.isFrozen(this.props)->true

    2. 初始化状态
      状态：后期修改状态，可以触发视图的更新
      需要手动初始化，如果我们没有去做相关的处理，则默认会往实例上挂载一个state，初始值是null => this.state=null
      手动处理：
      state = {
        ...
      };
      ---------修改状态，控制视图更新
      this.state.xxx=xxx ：这种操作仅仅是修改了状态值，但是无法让视图更新
      想让视图更新，我们需要基于React.Component.prototype提供的方法操作：
        @1 this.setState(partialState) 既可以修改状态，也可以让视图更新 「推荐」
          + partialState:部分状态
          this.setState({
            xxx:xxx
          });
        @2 this.forceUpdate() 强制更新

    3. 触发 componentWillMount 周期函数(钩子函数)：组件第一次渲染之前
      钩子函数：在程序运行到某个阶段，我们可以基于提供一个处理函数，让开发者在这个阶段做一些自定义的事情
      + 此周期函数，目前是不安全的「虽然可以用，但是未来可能要被移除了，所以不建议使用」
        + 控制会抛出黄色警告「为了不抛出警告，我们可以暂时用 UNSAFE_componentWillMount」
      + 如果开启了React.StrictMode「React的严格模式」，则我们使用 UNSAFE_componentWillMount 这样的周期函数，控制台会直接抛出红色警告错误！！
        React.StrictMode VS "use strict"
        + "use strict"：JS的严格模式
        + React.StrictMode：React的严格模式，它会去检查React中一些不规范的语法、或者是一些不建议使用的API等！！

    4. 触发 render 周期函数：渲染
    5. 触发 componentDidMount 周期函数：第一次渲染完毕
      + 已经把virtualDOM变为真实DOM了「所以我们可以获取真实DOM了」
      + ...

  组件更新的逻辑「第一种：组件内部的状态被修改，组件会更新」
    1. 触发 shouldComponentUpdate 周期函数：是否允许更新
       shouldComponentUpdate(nextProps, nextState) {
         // nextState:存储要修改的最新状态
         // this.state:存储的还是修改前的状态「此时状态还没有改变」
         console.log(this.state, nextState);

         // 此周期函数需要返回true/false
         //   返回true：允许更新，会继续执行下一个操作
         //   返回false：不允许更新，接下来啥都不处理
         return true;
       }
    2. 触发 componentWillUpdate 周期函数：更新之前
      + 此周期函数也是不安全的
      + 在这个阶段，状态/属性还没有被修改
    3. 修改状态值/属性值「让this.state.xxx改为最新的值」
    4. 触发 render 周期函数：组件更新
      + 按照最新的状态/属性，把返回的JSX编译为virtualDOM
      + 和上一次渲染出来的virtualDOM进行对比「DOM-DIFF」
      + 把差异的部分进行渲染「渲染为真实的DOM」
    5. 触发 componentDidUpdate 周期函数：组件更新完毕
    特殊说明：如果我们是基于 this.forceUpdate() 强制更新视图，会跳过 shouldComponentUpdate 周期函数的校验，直接从 WillUpdate 开始进行更新「也就是：视图一定会触发更新」！

  组件更新的逻辑「第二种：父组件更新，触发的子组件更新」
    1. 触发 componentWillReceiveProps 周期函数：接收最新属性之前
      + 周期函数是不安全的
      UNSAFE_componentWillReceiveProps(nextProps) {
        // this.props:存储之前的属性
        // nextProps:传递进来的最新属性值
        console.log('componentWillReceiveProps:', this.props, nextProps);
      }
    2. 触发 shouldComponentUpdate 周期函数
    ......

  组件卸载的逻辑
    1. 触发 componentWillUnmount 周期函数：组件销毁之前
    2. 销毁

  父子组件嵌套，处理机制上遵循深度优先原则：父组件在操作中，遇到子组件，一定是把子组件处理完，父组件才能继续处理
    + 父组件第一次渲染
      父 willMount -> 父 render「子 willMount -> 子 render -> 子didMount」 -> 父didMount 
    + 父组件更新：
      父 shouldUpdate -> 父willUpdate -> 父 render 「子willReceiveProps -> 子 shouldUpdate -> 子willUpdate -> 子 render -> 子 didUpdate」-> 父 didUpdate
    + 父组件销毁：
      父 willUnmount -> 处理中「子willUnmount -> 子销毁」-> 父销毁
===========================================================================